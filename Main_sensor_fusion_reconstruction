{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNsFBxmEkz6qncHIIsL2wx+",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/daviddkovacs/MOGPR-time-series-reconstruction/blob/main/Main_sensor_fusion_reconstruction\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Installing required libraries"
      ],
      "metadata": {
        "id": "Kbugpm2PaCKZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "import ee\n",
        "ee.Authenticate()\n",
        "\n",
        "!pip install xesmf\n",
        "!pip install wxee\n",
        "!pip install rasterio\n",
        "!pip install geopandas\n",
        "!pip install geextract\n",
        "!pip install gmaps\n",
        "!pip install pdf2image\n",
        "!pip install mogptk\n",
        "!pip install GPy\n",
        "!pip install openeo\n",
        "!pip install PyPDF2\n",
        "\n",
        "ee.Initialize()"
      ],
      "metadata": {
        "id": "xrakbutLaAO_",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "47489ce3-234e-4ce9-8cc4-c7b6612c07ee"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "To authorize access needed by Earth Engine, open the following URL in a web browser and follow the instructions. If the web browser does not start automatically, please manually browse the URL below.\n",
            "\n",
            "    https://code.earthengine.google.com/client-auth?scopes=https%3A//www.googleapis.com/auth/earthengine%20https%3A//www.googleapis.com/auth/devstorage.full_control&request_id=eaYNOk5tGimBBnTguLymoewx3PwWzhOhccEdI51UxRQ&tc=nwD--wyEPZU7nCsYBhOKUe4gYxltY_cEExeRsDRSMR0&cc=xSKu9QFrCOP8f8SOqhGSE65LLe_tr3iVwzytZ_jS9uE\n",
            "\n",
            "The authorization workflow will generate a code, which you should paste in the box below.\n",
            "Enter verification code: 4/1AfJohXmWlvCPaxCbkalL1G6Ajj-MVnWAM0mI1aPJPFEtIJvZ-k5nNWQQUp0\n",
            "\n",
            "Successfully saved authorization token.\n",
            "Collecting xesmf\n",
            "  Downloading xesmf-0.8.2-py3-none-any.whl (45 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m45.0/45.0 kB\u001b[0m \u001b[31m2.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting cf-xarray>=0.5.1 (from xesmf)\n",
            "  Downloading cf_xarray-0.8.6-py3-none-any.whl (58 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m58.6/58.6 kB\u001b[0m \u001b[31m5.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: numba>=0.55.2 in /usr/local/lib/python3.10/dist-packages (from xesmf) (0.58.1)\n",
            "Requirement already satisfied: numpy>=1.16 in /usr/local/lib/python3.10/dist-packages (from xesmf) (1.23.5)\n",
            "Requirement already satisfied: shapely in /usr/local/lib/python3.10/dist-packages (from xesmf) (2.0.2)\n",
            "Collecting sparse>=0.8.0 (from xesmf)\n",
            "  Downloading sparse-0.14.0-py2.py3-none-any.whl (80 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m81.0/81.0 kB\u001b[0m \u001b[31m10.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: xarray>=0.16.2 in /usr/local/lib/python3.10/dist-packages (from xesmf) (2023.7.0)\n",
            "Requirement already satisfied: llvmlite<0.42,>=0.41.0dev0 in /usr/local/lib/python3.10/dist-packages (from numba>=0.55.2->xesmf) (0.41.1)\n",
            "Requirement already satisfied: scipy>=0.19 in /usr/local/lib/python3.10/dist-packages (from sparse>=0.8.0->xesmf) (1.11.4)\n",
            "Requirement already satisfied: pandas>=1.4 in /usr/local/lib/python3.10/dist-packages (from xarray>=0.16.2->xesmf) (1.5.3)\n",
            "Requirement already satisfied: packaging>=21.3 in /usr/local/lib/python3.10/dist-packages (from xarray>=0.16.2->xesmf) (23.2)\n",
            "Requirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.4->xarray>=0.16.2->xesmf) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.4->xarray>=0.16.2->xesmf) (2023.3.post1)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.1->pandas>=1.4->xarray>=0.16.2->xesmf) (1.16.0)\n",
            "Installing collected packages: sparse, cf-xarray, xesmf\n",
            "Successfully installed cf-xarray-0.8.6 sparse-0.14.0 xesmf-0.8.2\n",
            "Collecting wxee\n",
            "  Downloading wxee-0.4.1-py3-none-any.whl (26 kB)\n",
            "Requirement already satisfied: earthengine-api in /usr/local/lib/python3.10/dist-packages (from wxee) (0.1.381)\n",
            "Requirement already satisfied: joblib in /usr/local/lib/python3.10/dist-packages (from wxee) (1.3.2)\n",
            "Collecting rasterio (from wxee)\n",
            "  Downloading rasterio-1.3.9-cp310-cp310-manylinux2014_x86_64.whl (20.6 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m20.6/20.6 MB\u001b[0m \u001b[31m50.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from wxee) (2.31.0)\n",
            "Collecting rioxarray (from wxee)\n",
            "  Downloading rioxarray-0.15.0-py3-none-any.whl (53 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m53.7/53.7 kB\u001b[0m \u001b[31m6.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from wxee) (4.66.1)\n",
            "Requirement already satisfied: xarray in /usr/local/lib/python3.10/dist-packages (from wxee) (2023.7.0)\n",
            "Requirement already satisfied: google-cloud-storage in /usr/local/lib/python3.10/dist-packages (from earthengine-api->wxee) (2.8.0)\n",
            "Requirement already satisfied: google-api-python-client>=1.12.1 in /usr/local/lib/python3.10/dist-packages (from earthengine-api->wxee) (2.84.0)\n",
            "Requirement already satisfied: google-auth>=1.4.1 in /usr/local/lib/python3.10/dist-packages (from earthengine-api->wxee) (2.17.3)\n",
            "Requirement already satisfied: google-auth-httplib2>=0.0.3 in /usr/local/lib/python3.10/dist-packages (from earthengine-api->wxee) (0.1.1)\n",
            "Requirement already satisfied: httplib2<1dev,>=0.9.2 in /usr/local/lib/python3.10/dist-packages (from earthengine-api->wxee) (0.22.0)\n",
            "Collecting affine (from rasterio->wxee)\n",
            "  Downloading affine-2.4.0-py3-none-any.whl (15 kB)\n",
            "Requirement already satisfied: attrs in /usr/local/lib/python3.10/dist-packages (from rasterio->wxee) (23.1.0)\n",
            "Requirement already satisfied: certifi in /usr/local/lib/python3.10/dist-packages (from rasterio->wxee) (2023.11.17)\n",
            "Requirement already satisfied: click>=4.0 in /usr/local/lib/python3.10/dist-packages (from rasterio->wxee) (8.1.7)\n",
            "Requirement already satisfied: cligj>=0.5 in /usr/local/lib/python3.10/dist-packages (from rasterio->wxee) (0.7.2)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from rasterio->wxee) (1.23.5)\n",
            "Collecting snuggs>=1.4.1 (from rasterio->wxee)\n",
            "  Downloading snuggs-1.4.7-py3-none-any.whl (5.4 kB)\n",
            "Requirement already satisfied: click-plugins in /usr/local/lib/python3.10/dist-packages (from rasterio->wxee) (1.1.1)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from rasterio->wxee) (67.7.2)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->wxee) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->wxee) (3.6)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->wxee) (2.0.7)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from rioxarray->wxee) (23.2)\n",
            "Requirement already satisfied: pyproj>=2.2 in /usr/local/lib/python3.10/dist-packages (from rioxarray->wxee) (3.6.1)\n",
            "Requirement already satisfied: pandas>=1.4 in /usr/local/lib/python3.10/dist-packages (from xarray->wxee) (1.5.3)\n",
            "Requirement already satisfied: google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0dev,>=1.31.5 in /usr/local/lib/python3.10/dist-packages (from google-api-python-client>=1.12.1->earthengine-api->wxee) (2.11.1)\n",
            "Requirement already satisfied: uritemplate<5,>=3.0.1 in /usr/local/lib/python3.10/dist-packages (from google-api-python-client>=1.12.1->earthengine-api->wxee) (4.1.1)\n",
            "Requirement already satisfied: cachetools<6.0,>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from google-auth>=1.4.1->earthengine-api->wxee) (5.3.2)\n",
            "Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from google-auth>=1.4.1->earthengine-api->wxee) (0.3.0)\n",
            "Requirement already satisfied: six>=1.9.0 in /usr/local/lib/python3.10/dist-packages (from google-auth>=1.4.1->earthengine-api->wxee) (1.16.0)\n",
            "Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.10/dist-packages (from google-auth>=1.4.1->earthengine-api->wxee) (4.9)\n",
            "Requirement already satisfied: pyparsing!=3.0.0,!=3.0.1,!=3.0.2,!=3.0.3,<4,>=2.4.2 in /usr/local/lib/python3.10/dist-packages (from httplib2<1dev,>=0.9.2->earthengine-api->wxee) (3.1.1)\n",
            "Requirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.4->xarray->wxee) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.4->xarray->wxee) (2023.3.post1)\n",
            "Requirement already satisfied: google-cloud-core<3.0dev,>=2.3.0 in /usr/local/lib/python3.10/dist-packages (from google-cloud-storage->earthengine-api->wxee) (2.3.3)\n",
            "Requirement already satisfied: google-resumable-media>=2.3.2 in /usr/local/lib/python3.10/dist-packages (from google-cloud-storage->earthengine-api->wxee) (2.6.0)\n",
            "Requirement already satisfied: googleapis-common-protos<2.0.dev0,>=1.56.2 in /usr/local/lib/python3.10/dist-packages (from google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0dev,>=1.31.5->google-api-python-client>=1.12.1->earthengine-api->wxee) (1.61.0)\n",
            "Requirement already satisfied: protobuf!=3.20.0,!=3.20.1,!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0.dev0,>=3.19.5 in /usr/local/lib/python3.10/dist-packages (from google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0dev,>=1.31.5->google-api-python-client>=1.12.1->earthengine-api->wxee) (3.20.3)\n",
            "Requirement already satisfied: google-crc32c<2.0dev,>=1.0 in /usr/local/lib/python3.10/dist-packages (from google-resumable-media>=2.3.2->google-cloud-storage->earthengine-api->wxee) (1.5.0)\n",
            "Requirement already satisfied: pyasn1<0.6.0,>=0.4.6 in /usr/local/lib/python3.10/dist-packages (from pyasn1-modules>=0.2.1->google-auth>=1.4.1->earthengine-api->wxee) (0.5.1)\n",
            "Installing collected packages: snuggs, affine, rasterio, rioxarray, wxee\n",
            "Successfully installed affine-2.4.0 rasterio-1.3.9 rioxarray-0.15.0 snuggs-1.4.7 wxee-0.4.1\n",
            "Requirement already satisfied: rasterio in /usr/local/lib/python3.10/dist-packages (1.3.9)\n",
            "Requirement already satisfied: affine in /usr/local/lib/python3.10/dist-packages (from rasterio) (2.4.0)\n",
            "Requirement already satisfied: attrs in /usr/local/lib/python3.10/dist-packages (from rasterio) (23.1.0)\n",
            "Requirement already satisfied: certifi in /usr/local/lib/python3.10/dist-packages (from rasterio) (2023.11.17)\n",
            "Requirement already satisfied: click>=4.0 in /usr/local/lib/python3.10/dist-packages (from rasterio) (8.1.7)\n",
            "Requirement already satisfied: cligj>=0.5 in /usr/local/lib/python3.10/dist-packages (from rasterio) (0.7.2)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from rasterio) (1.23.5)\n",
            "Requirement already satisfied: snuggs>=1.4.1 in /usr/local/lib/python3.10/dist-packages (from rasterio) (1.4.7)\n",
            "Requirement already satisfied: click-plugins in /usr/local/lib/python3.10/dist-packages (from rasterio) (1.1.1)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from rasterio) (67.7.2)\n",
            "Requirement already satisfied: pyparsing>=2.1.6 in /usr/local/lib/python3.10/dist-packages (from snuggs>=1.4.1->rasterio) (3.1.1)\n",
            "Requirement already satisfied: geopandas in /usr/local/lib/python3.10/dist-packages (0.13.2)\n",
            "Requirement already satisfied: fiona>=1.8.19 in /usr/local/lib/python3.10/dist-packages (from geopandas) (1.9.5)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from geopandas) (23.2)\n",
            "Requirement already satisfied: pandas>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from geopandas) (1.5.3)\n",
            "Requirement already satisfied: pyproj>=3.0.1 in /usr/local/lib/python3.10/dist-packages (from geopandas) (3.6.1)\n",
            "Requirement already satisfied: shapely>=1.7.1 in /usr/local/lib/python3.10/dist-packages (from geopandas) (2.0.2)\n",
            "Requirement already satisfied: attrs>=19.2.0 in /usr/local/lib/python3.10/dist-packages (from fiona>=1.8.19->geopandas) (23.1.0)\n",
            "Requirement already satisfied: certifi in /usr/local/lib/python3.10/dist-packages (from fiona>=1.8.19->geopandas) (2023.11.17)\n",
            "Requirement already satisfied: click~=8.0 in /usr/local/lib/python3.10/dist-packages (from fiona>=1.8.19->geopandas) (8.1.7)\n",
            "Requirement already satisfied: click-plugins>=1.0 in /usr/local/lib/python3.10/dist-packages (from fiona>=1.8.19->geopandas) (1.1.1)\n",
            "Requirement already satisfied: cligj>=0.5 in /usr/local/lib/python3.10/dist-packages (from fiona>=1.8.19->geopandas) (0.7.2)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from fiona>=1.8.19->geopandas) (1.16.0)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from fiona>=1.8.19->geopandas) (67.7.2)\n",
            "Requirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.1.0->geopandas) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.1.0->geopandas) (2023.3.post1)\n",
            "Requirement already satisfied: numpy>=1.21.0 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.1.0->geopandas) (1.23.5)\n",
            "Collecting geextract\n",
            "  Downloading geextract-0.5.0.tar.gz (10.0 kB)\n",
            "  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (from geextract) (1.5.3)\n",
            "Requirement already satisfied: earthengine-api in /usr/local/lib/python3.10/dist-packages (from geextract) (0.1.381)\n",
            "Requirement already satisfied: google-cloud-storage in /usr/local/lib/python3.10/dist-packages (from earthengine-api->geextract) (2.8.0)\n",
            "Requirement already satisfied: google-api-python-client>=1.12.1 in /usr/local/lib/python3.10/dist-packages (from earthengine-api->geextract) (2.84.0)\n",
            "Requirement already satisfied: google-auth>=1.4.1 in /usr/local/lib/python3.10/dist-packages (from earthengine-api->geextract) (2.17.3)\n",
            "Requirement already satisfied: google-auth-httplib2>=0.0.3 in /usr/local/lib/python3.10/dist-packages (from earthengine-api->geextract) (0.1.1)\n",
            "Requirement already satisfied: httplib2<1dev,>=0.9.2 in /usr/local/lib/python3.10/dist-packages (from earthengine-api->geextract) (0.22.0)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from earthengine-api->geextract) (2.31.0)\n",
            "Requirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.10/dist-packages (from pandas->geextract) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas->geextract) (2023.3.post1)\n",
            "Requirement already satisfied: numpy>=1.21.0 in /usr/local/lib/python3.10/dist-packages (from pandas->geextract) (1.23.5)\n",
            "Requirement already satisfied: google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0dev,>=1.31.5 in /usr/local/lib/python3.10/dist-packages (from google-api-python-client>=1.12.1->earthengine-api->geextract) (2.11.1)\n",
            "Requirement already satisfied: uritemplate<5,>=3.0.1 in /usr/local/lib/python3.10/dist-packages (from google-api-python-client>=1.12.1->earthengine-api->geextract) (4.1.1)\n",
            "Requirement already satisfied: cachetools<6.0,>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from google-auth>=1.4.1->earthengine-api->geextract) (5.3.2)\n",
            "Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from google-auth>=1.4.1->earthengine-api->geextract) (0.3.0)\n",
            "Requirement already satisfied: six>=1.9.0 in /usr/local/lib/python3.10/dist-packages (from google-auth>=1.4.1->earthengine-api->geextract) (1.16.0)\n",
            "Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.10/dist-packages (from google-auth>=1.4.1->earthengine-api->geextract) (4.9)\n",
            "Requirement already satisfied: pyparsing!=3.0.0,!=3.0.1,!=3.0.2,!=3.0.3,<4,>=2.4.2 in /usr/local/lib/python3.10/dist-packages (from httplib2<1dev,>=0.9.2->earthengine-api->geextract) (3.1.1)\n",
            "Requirement already satisfied: google-cloud-core<3.0dev,>=2.3.0 in /usr/local/lib/python3.10/dist-packages (from google-cloud-storage->earthengine-api->geextract) (2.3.3)\n",
            "Requirement already satisfied: google-resumable-media>=2.3.2 in /usr/local/lib/python3.10/dist-packages (from google-cloud-storage->earthengine-api->geextract) (2.6.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->earthengine-api->geextract) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->earthengine-api->geextract) (3.6)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->earthengine-api->geextract) (2.0.7)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->earthengine-api->geextract) (2023.11.17)\n",
            "Requirement already satisfied: googleapis-common-protos<2.0.dev0,>=1.56.2 in /usr/local/lib/python3.10/dist-packages (from google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0dev,>=1.31.5->google-api-python-client>=1.12.1->earthengine-api->geextract) (1.61.0)\n",
            "Requirement already satisfied: protobuf!=3.20.0,!=3.20.1,!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0.dev0,>=3.19.5 in /usr/local/lib/python3.10/dist-packages (from google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0dev,>=1.31.5->google-api-python-client>=1.12.1->earthengine-api->geextract) (3.20.3)\n",
            "Requirement already satisfied: google-crc32c<2.0dev,>=1.0 in /usr/local/lib/python3.10/dist-packages (from google-resumable-media>=2.3.2->google-cloud-storage->earthengine-api->geextract) (1.5.0)\n",
            "Requirement already satisfied: pyasn1<0.6.0,>=0.4.6 in /usr/local/lib/python3.10/dist-packages (from pyasn1-modules>=0.2.1->google-auth>=1.4.1->earthengine-api->geextract) (0.5.1)\n",
            "Building wheels for collected packages: geextract\n",
            "  Building wheel for geextract (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for geextract: filename=geextract-0.5.0-py3-none-any.whl size=12829 sha256=b8de00f0cf1ca485e7c540998da32120e65331be423de9f24b79c3401b3c96ae\n",
            "  Stored in directory: /root/.cache/pip/wheels/2f/04/46/81ecb5def97789996102715d1eeeb0501e6f7c1ccf7ab65845\n",
            "Successfully built geextract\n",
            "Installing collected packages: geextract\n",
            "Successfully installed geextract-0.5.0\n",
            "Collecting gmaps\n",
            "  Downloading gmaps-0.9.0.tar.gz (1.1 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.1/1.1 MB\u001b[0m \u001b[31m8.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Requirement already satisfied: ipython>=5.3.0 in /usr/local/lib/python3.10/dist-packages (from gmaps) (7.34.0)\n",
            "Requirement already satisfied: ipywidgets>=7.0.0 in /usr/local/lib/python3.10/dist-packages (from gmaps) (7.7.1)\n",
            "Requirement already satisfied: traitlets>=4.3.0 in /usr/local/lib/python3.10/dist-packages (from gmaps) (5.7.1)\n",
            "Collecting geojson>=2.0.0 (from gmaps)\n",
            "  Downloading geojson-3.1.0-py3-none-any.whl (15 kB)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from gmaps) (1.16.0)\n",
            "Requirement already satisfied: setuptools>=18.5 in /usr/local/lib/python3.10/dist-packages (from ipython>=5.3.0->gmaps) (67.7.2)\n",
            "Collecting jedi>=0.16 (from ipython>=5.3.0->gmaps)\n",
            "  Downloading jedi-0.19.1-py2.py3-none-any.whl (1.6 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.6/1.6 MB\u001b[0m \u001b[31m17.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: decorator in /usr/local/lib/python3.10/dist-packages (from ipython>=5.3.0->gmaps) (4.4.2)\n",
            "Requirement already satisfied: pickleshare in /usr/local/lib/python3.10/dist-packages (from ipython>=5.3.0->gmaps) (0.7.5)\n",
            "Requirement already satisfied: prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from ipython>=5.3.0->gmaps) (3.0.41)\n",
            "Requirement already satisfied: pygments in /usr/local/lib/python3.10/dist-packages (from ipython>=5.3.0->gmaps) (2.16.1)\n",
            "Requirement already satisfied: backcall in /usr/local/lib/python3.10/dist-packages (from ipython>=5.3.0->gmaps) (0.2.0)\n",
            "Requirement already satisfied: matplotlib-inline in /usr/local/lib/python3.10/dist-packages (from ipython>=5.3.0->gmaps) (0.1.6)\n",
            "Requirement already satisfied: pexpect>4.3 in /usr/local/lib/python3.10/dist-packages (from ipython>=5.3.0->gmaps) (4.9.0)\n",
            "Requirement already satisfied: ipykernel>=4.5.1 in /usr/local/lib/python3.10/dist-packages (from ipywidgets>=7.0.0->gmaps) (5.5.6)\n",
            "Requirement already satisfied: ipython-genutils~=0.2.0 in /usr/local/lib/python3.10/dist-packages (from ipywidgets>=7.0.0->gmaps) (0.2.0)\n",
            "Requirement already satisfied: widgetsnbextension~=3.6.0 in /usr/local/lib/python3.10/dist-packages (from ipywidgets>=7.0.0->gmaps) (3.6.6)\n",
            "Requirement already satisfied: jupyterlab-widgets>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from ipywidgets>=7.0.0->gmaps) (3.0.9)\n",
            "Requirement already satisfied: jupyter-client in /usr/local/lib/python3.10/dist-packages (from ipykernel>=4.5.1->ipywidgets>=7.0.0->gmaps) (6.1.12)\n",
            "Requirement already satisfied: tornado>=4.2 in /usr/local/lib/python3.10/dist-packages (from ipykernel>=4.5.1->ipywidgets>=7.0.0->gmaps) (6.3.2)\n",
            "Requirement already satisfied: parso<0.9.0,>=0.8.3 in /usr/local/lib/python3.10/dist-packages (from jedi>=0.16->ipython>=5.3.0->gmaps) (0.8.3)\n",
            "Requirement already satisfied: ptyprocess>=0.5 in /usr/local/lib/python3.10/dist-packages (from pexpect>4.3->ipython>=5.3.0->gmaps) (0.7.0)\n",
            "Requirement already satisfied: wcwidth in /usr/local/lib/python3.10/dist-packages (from prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0->ipython>=5.3.0->gmaps) (0.2.12)\n",
            "Requirement already satisfied: notebook>=4.4.1 in /usr/local/lib/python3.10/dist-packages (from widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->gmaps) (6.5.5)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->gmaps) (3.1.2)\n",
            "Requirement already satisfied: pyzmq<25,>=17 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->gmaps) (23.2.1)\n",
            "Requirement already satisfied: argon2-cffi in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->gmaps) (23.1.0)\n",
            "Requirement already satisfied: jupyter-core>=4.6.1 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->gmaps) (5.5.0)\n",
            "Requirement already satisfied: nbformat in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->gmaps) (5.9.2)\n",
            "Requirement already satisfied: nbconvert>=5 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->gmaps) (6.5.4)\n",
            "Requirement already satisfied: nest-asyncio>=1.5 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->gmaps) (1.5.8)\n",
            "Requirement already satisfied: Send2Trash>=1.8.0 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->gmaps) (1.8.2)\n",
            "Requirement already satisfied: terminado>=0.8.3 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->gmaps) (0.18.0)\n",
            "Requirement already satisfied: prometheus-client in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->gmaps) (0.19.0)\n",
            "Requirement already satisfied: nbclassic>=0.4.7 in /usr/local/lib/python3.10/dist-packages (from notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->gmaps) (1.0.0)\n",
            "Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.10/dist-packages (from jupyter-client->ipykernel>=4.5.1->ipywidgets>=7.0.0->gmaps) (2.8.2)\n",
            "Requirement already satisfied: platformdirs>=2.5 in /usr/local/lib/python3.10/dist-packages (from jupyter-core>=4.6.1->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->gmaps) (4.0.0)\n",
            "Requirement already satisfied: jupyter-server>=1.8 in /usr/local/lib/python3.10/dist-packages (from nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->gmaps) (1.24.0)\n",
            "Requirement already satisfied: notebook-shim>=0.2.3 in /usr/local/lib/python3.10/dist-packages (from nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->gmaps) (0.2.3)\n",
            "Requirement already satisfied: lxml in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->gmaps) (4.9.3)\n",
            "Requirement already satisfied: beautifulsoup4 in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->gmaps) (4.11.2)\n",
            "Requirement already satisfied: bleach in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->gmaps) (6.1.0)\n",
            "Requirement already satisfied: defusedxml in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->gmaps) (0.7.1)\n",
            "Requirement already satisfied: entrypoints>=0.2.2 in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->gmaps) (0.4)\n",
            "Requirement already satisfied: jupyterlab-pygments in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->gmaps) (0.3.0)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->gmaps) (2.1.3)\n",
            "Requirement already satisfied: mistune<2,>=0.8.1 in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->gmaps) (0.8.4)\n",
            "Requirement already satisfied: nbclient>=0.5.0 in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->gmaps) (0.9.0)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->gmaps) (23.2)\n",
            "Requirement already satisfied: pandocfilters>=1.4.1 in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->gmaps) (1.5.0)\n",
            "Requirement already satisfied: tinycss2 in /usr/local/lib/python3.10/dist-packages (from nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->gmaps) (1.2.1)\n",
            "Requirement already satisfied: fastjsonschema in /usr/local/lib/python3.10/dist-packages (from nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->gmaps) (2.19.0)\n",
            "Requirement already satisfied: jsonschema>=2.6 in /usr/local/lib/python3.10/dist-packages (from nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->gmaps) (4.19.2)\n",
            "Requirement already satisfied: argon2-cffi-bindings in /usr/local/lib/python3.10/dist-packages (from argon2-cffi->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->gmaps) (21.2.0)\n",
            "Requirement already satisfied: attrs>=22.2.0 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=2.6->nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->gmaps) (23.1.0)\n",
            "Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=2.6->nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->gmaps) (2023.11.2)\n",
            "Requirement already satisfied: referencing>=0.28.4 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=2.6->nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->gmaps) (0.31.1)\n",
            "Requirement already satisfied: rpds-py>=0.7.1 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=2.6->nbformat->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->gmaps) (0.13.2)\n",
            "Requirement already satisfied: anyio<4,>=3.1.0 in /usr/local/lib/python3.10/dist-packages (from jupyter-server>=1.8->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->gmaps) (3.7.1)\n",
            "Requirement already satisfied: websocket-client in /usr/local/lib/python3.10/dist-packages (from jupyter-server>=1.8->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->gmaps) (1.6.4)\n",
            "Requirement already satisfied: cffi>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from argon2-cffi-bindings->argon2-cffi->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->gmaps) (1.16.0)\n",
            "Requirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.10/dist-packages (from beautifulsoup4->nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->gmaps) (2.5)\n",
            "Requirement already satisfied: webencodings in /usr/local/lib/python3.10/dist-packages (from bleach->nbconvert>=5->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->gmaps) (0.5.1)\n",
            "Requirement already satisfied: idna>=2.8 in /usr/local/lib/python3.10/dist-packages (from anyio<4,>=3.1.0->jupyter-server>=1.8->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->gmaps) (3.6)\n",
            "Requirement already satisfied: sniffio>=1.1 in /usr/local/lib/python3.10/dist-packages (from anyio<4,>=3.1.0->jupyter-server>=1.8->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->gmaps) (1.3.0)\n",
            "Requirement already satisfied: exceptiongroup in /usr/local/lib/python3.10/dist-packages (from anyio<4,>=3.1.0->jupyter-server>=1.8->nbclassic>=0.4.7->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->gmaps) (1.2.0)\n",
            "Requirement already satisfied: pycparser in /usr/local/lib/python3.10/dist-packages (from cffi>=1.0.1->argon2-cffi-bindings->argon2-cffi->notebook>=4.4.1->widgetsnbextension~=3.6.0->ipywidgets>=7.0.0->gmaps) (2.21)\n",
            "Building wheels for collected packages: gmaps\n",
            "  Building wheel for gmaps (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for gmaps: filename=gmaps-0.9.0-py2.py3-none-any.whl size=2076084 sha256=998a54cbc636f63b23f19d3c6bd3c1f13fa693000495eb3218c78818c2290a53\n",
            "  Stored in directory: /root/.cache/pip/wheels/b3/c2/dc/48b3ef16c2184dae51a003f17eb5d065bbbf1af3437d9f14e3\n",
            "Successfully built gmaps\n",
            "Installing collected packages: jedi, geojson, gmaps\n",
            "Successfully installed geojson-3.1.0 gmaps-0.9.0 jedi-0.19.1\n",
            "Collecting pdf2image\n",
            "  Downloading pdf2image-1.16.3-py3-none-any.whl (11 kB)\n",
            "Requirement already satisfied: pillow in /usr/local/lib/python3.10/dist-packages (from pdf2image) (9.4.0)\n",
            "Installing collected packages: pdf2image\n",
            "Successfully installed pdf2image-1.16.3\n",
            "Collecting mogptk\n",
            "  Downloading mogptk-0.3.4-py3-none-any.whl (126 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m126.3/126.3 kB\u001b[0m \u001b[31m3.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: matplotlib>=3.3 in /usr/local/lib/python3.10/dist-packages (from mogptk) (3.7.1)\n",
            "Requirement already satisfied: numpy>=1.10 in /usr/local/lib/python3.10/dist-packages (from mogptk) (1.23.5)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (from mogptk) (1.5.3)\n",
            "Requirement already satisfied: python-dateutil in /usr/local/lib/python3.10/dist-packages (from mogptk) (2.8.2)\n",
            "Requirement already satisfied: scipy>=1.7 in /usr/local/lib/python3.10/dist-packages (from mogptk) (1.11.4)\n",
            "Requirement already satisfied: torch>=1.11 in /usr/local/lib/python3.10/dist-packages (from mogptk) (2.1.0+cu118)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.3->mogptk) (1.2.0)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.3->mogptk) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.3->mogptk) (4.45.1)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.3->mogptk) (1.4.5)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.3->mogptk) (23.2)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.3->mogptk) (9.4.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib>=3.3->mogptk) (3.1.1)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil->mogptk) (1.16.0)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from torch>=1.11->mogptk) (3.13.1)\n",
            "Requirement already satisfied: typing-extensions in /usr/local/lib/python3.10/dist-packages (from torch>=1.11->mogptk) (4.5.0)\n",
            "Requirement already satisfied: sympy in /usr/local/lib/python3.10/dist-packages (from torch>=1.11->mogptk) (1.12)\n",
            "Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from torch>=1.11->mogptk) (3.2.1)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch>=1.11->mogptk) (3.1.2)\n",
            "Requirement already satisfied: fsspec in /usr/local/lib/python3.10/dist-packages (from torch>=1.11->mogptk) (2023.6.0)\n",
            "Requirement already satisfied: triton==2.1.0 in /usr/local/lib/python3.10/dist-packages (from torch>=1.11->mogptk) (2.1.0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas->mogptk) (2023.3.post1)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->torch>=1.11->mogptk) (2.1.3)\n",
            "Requirement already satisfied: mpmath>=0.19 in /usr/local/lib/python3.10/dist-packages (from sympy->torch>=1.11->mogptk) (1.3.0)\n",
            "Installing collected packages: mogptk\n",
            "Successfully installed mogptk-0.3.4\n",
            "Collecting GPy\n",
            "  Downloading GPy-1.10.0.tar.gz (959 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m959.4/959.4 kB\u001b[0m \u001b[31m7.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Requirement already satisfied: numpy>=1.7 in /usr/local/lib/python3.10/dist-packages (from GPy) (1.23.5)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from GPy) (1.16.0)\n",
            "Collecting paramz>=0.9.0 (from GPy)\n",
            "  Downloading paramz-0.9.5.tar.gz (71 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m71.3/71.3 kB\u001b[0m \u001b[31m10.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Requirement already satisfied: cython>=0.29 in /usr/local/lib/python3.10/dist-packages (from GPy) (3.0.6)\n",
            "Requirement already satisfied: scipy>=1.3.0 in /usr/local/lib/python3.10/dist-packages (from GPy) (1.11.4)\n",
            "Requirement already satisfied: decorator>=4.0.10 in /usr/local/lib/python3.10/dist-packages (from paramz>=0.9.0->GPy) (4.4.2)\n",
            "Building wheels for collected packages: GPy, paramz\n",
            "  Building wheel for GPy (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for GPy: filename=GPy-1.10.0-cp310-cp310-linux_x86_64.whl size=3421245 sha256=1e81951e2c1e888e35ceed388b0e787fb092b6eda4931cdda16ca6bad64720c1\n",
            "  Stored in directory: /root/.cache/pip/wheels/27/bd/9f/82ab4216eae088cba864ca0dc1d75699bd4bf6823790fb2f77\n",
            "  Building wheel for paramz (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for paramz: filename=paramz-0.9.5-py3-none-any.whl size=102543 sha256=70efb384e6a5cd46896f838dd0526cf4dd6fe88db4c243d5373e824ea94746d5\n",
            "  Stored in directory: /root/.cache/pip/wheels/d2/ef/9c/da9ceef7d0ff5287c24365844fc394852c2b79ac3fcf33bf8b\n",
            "Successfully built GPy paramz\n",
            "Installing collected packages: paramz, GPy\n",
            "Successfully installed GPy-1.10.0 paramz-0.9.5\n",
            "Collecting openeo\n",
            "  Downloading openeo-0.26.0-py3-none-any.whl (247 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m247.9/247.9 kB\u001b[0m \u001b[31m5.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: requests>=2.26.0 in /usr/local/lib/python3.10/dist-packages (from openeo) (2.31.0)\n",
            "Requirement already satisfied: shapely>=1.6.4 in /usr/local/lib/python3.10/dist-packages (from openeo) (2.0.2)\n",
            "Requirement already satisfied: numpy>=1.17.0 in /usr/local/lib/python3.10/dist-packages (from openeo) (1.23.5)\n",
            "Requirement already satisfied: xarray>=0.12.3 in /usr/local/lib/python3.10/dist-packages (from openeo) (2023.7.0)\n",
            "Requirement already satisfied: pandas>0.20.0 in /usr/local/lib/python3.10/dist-packages (from openeo) (1.5.3)\n",
            "Collecting deprecated>=1.2.12 (from openeo)\n",
            "  Downloading Deprecated-1.2.14-py2.py3-none-any.whl (9.6 kB)\n",
            "Requirement already satisfied: wrapt<2,>=1.10 in /usr/local/lib/python3.10/dist-packages (from deprecated>=1.2.12->openeo) (1.14.1)\n",
            "Requirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.10/dist-packages (from pandas>0.20.0->openeo) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>0.20.0->openeo) (2023.3.post1)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests>=2.26.0->openeo) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests>=2.26.0->openeo) (3.6)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests>=2.26.0->openeo) (2.0.7)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests>=2.26.0->openeo) (2023.11.17)\n",
            "Requirement already satisfied: packaging>=21.3 in /usr/local/lib/python3.10/dist-packages (from xarray>=0.12.3->openeo) (23.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.1->pandas>0.20.0->openeo) (1.16.0)\n",
            "Installing collected packages: deprecated, openeo\n",
            "Successfully installed deprecated-1.2.14 openeo-0.26.0\n",
            "Collecting PyPDF2\n",
            "  Downloading pypdf2-3.0.1-py3-none-any.whl (232 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m232.6/232.6 kB\u001b[0m \u001b[31m3.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: PyPDF2\n",
            "Successfully installed PyPDF2-3.0.1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "cwpuaW_XZx2L"
      },
      "outputs": [],
      "source": [
        "from geextract import ts_extract, relabel, date_append, dictlist2sqlite\n",
        "from google.colab import files\n",
        "import matplotlib.pyplot as plt\n",
        "from datetime import datetime\n",
        "import osgeo.ogr\n",
        "import json\n",
        "from pdf2image import convert_from_path\n",
        "import sys\n",
        "import pickle\n",
        "import GPy\n",
        "import openeo\n",
        "import h5py\n",
        "import math\n",
        "from scipy.stats import pearsonr\n",
        "import csv\n",
        "import PyPDF2\n",
        "from shapely.geometry import box\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from openeo.rest.conversions import timeseries_json_to_pandas\n",
        "import itertools\n",
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.dates as mdates\n",
        "import time\n",
        "import os\n",
        "import gmaps\n",
        "import seaborn as sns\n",
        "import matplotlib.ticker as ticker\n",
        "import traceback\n",
        "from datetime import timedelta\n",
        "import shapely\n",
        "from shapely.geometry import mapping\n",
        "from scipy.stats.stats import pearsonr, spearmanr\n",
        "from sklearn.metrics import mean_absolute_error"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Define temporal range\n",
        "\n",
        "\n",
        "if you define, in the first cells, the temporal domain to be the same, i.e. 2019 for S3 and 2019 for MODIS, it will be gap filling\n",
        "\n",
        "if you define MODIS to be, let's say, 2010-2020 and S3 to be only 2019, then it will reconstruct/extend S3 to the broader, 2010-20 timeframe\n",
        "i.e temporally reconstruct."
      ],
      "metadata": {
        "id": "YQcZhTDhaYr2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "start_date = datetime(2000, 1, 1)\n",
        "end_date   = datetime(2022, 1, 1)\n",
        "\n",
        "# Available dates for S3 based vegetation traits: 2017-01-01 to 2021-12-01\n",
        "start_date_S3 = datetime(2019, 1, 1)\n",
        "end_date_S3   = datetime(2020, 1, 1)\n",
        "\n",
        "Tstep      = 8"
      ],
      "metadata": {
        "id": "-csq2fvGaNNA"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Define spatial domain\n",
        "\n",
        "Adjust site as needed. This site is defaulted to Valencia Anchor Station"
      ],
      "metadata": {
        "id": "fRRq01-saaFe"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "site ={'geometry':{'coordinates':\n",
        "         [[[-1.296402507606762, 39.57334640048957],\n",
        "          [-1.296402507606762, 39.56600234855508],\n",
        "          [-1.2870469625628167, 39.56600234855508],\n",
        "          [-1.2870469625628167, 39.57334640048957]]]\n",
        "                     },u'type': u'Polygon'}\n",
        "\n",
        ""
      ],
      "metadata": {
        "id": "bMPJrOV1aYMJ"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Here we create the 8 day temporal composites of MODIS NDVI. This dataset will be used as a guiding, predictor variable later on."
      ],
      "metadata": {
        "id": "TzHyIVwIar1D"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "daily_collection = (\n",
        "    ee.ImageCollection(\"MODIS/MOD09GA_006_NDVI\")\n",
        "    .filterDate(start_date, end_date)\n",
        ")\n",
        "\n",
        "# Create a list of dates at 8-day intervals\n",
        "dates = ee.List.sequence(\n",
        "    ee.Date(start_date).millis(),\n",
        "    ee.Date(end_date).advance(1, 'day').millis(),  # Add 1 day to include the end_date\n",
        "    8 * 24 * 60 * 60 * 1000  # 8 days in milliseconds\n",
        ")\n",
        "\n",
        "# function to create an 8-day mean composite\n",
        "def create_8_day_composite(start_date):\n",
        "    start_date = ee.Date(start_date)\n",
        "    end_date = start_date.advance(8, 'day')\n",
        "\n",
        "    mean_image = (\n",
        "        daily_collection\n",
        "        .filterDate(start_date, end_date)\n",
        "        .mean()\n",
        "    )\n",
        "    system_id = start_date.format('YYYY_MM_dd')\n",
        "\n",
        "    mean_image = mean_image.set('system:time_start', start_date)\n",
        "\n",
        "    return mean_image.set('system:id', system_id)\n",
        "\n",
        "composite_collection = ee.ImageCollection(dates.map(create_8_day_composite))"
      ],
      "metadata": {
        "id": "qK3ZFtfVaktq"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def create_empty_2D_list(nrows,ncols):\n",
        "\n",
        "    empty_list = []\n",
        "    for j in range(nrows):\n",
        "        column = []\n",
        "        for i in range(ncols):\n",
        "            column.append(0)\n",
        "        empty_list.append(column)\n",
        "    return empty_list\n",
        "\n",
        "def S3TOA_get_date(id):\n",
        "\n",
        "    date_info = datetime.date(datetime(int(id[0:4]),\n",
        "                                       int(id[4:6]),\n",
        "                                       int(id[6:8])))\n",
        "    return date_info\n",
        "\n",
        "\n",
        "def MODIS_get_date(id):\n",
        "\n",
        "    date_info = datetime.date(datetime(int(id[0:4]), int(id[5:7]), int(id[8:])))\n",
        "\n",
        "    return date_info\n",
        "\n",
        "def MODISNDVI_get_date(id):\n",
        "\n",
        "    day_from_start = start_date + timedelta(days=int(id)*8)\n",
        "    date_info = day_from_start\n",
        "\n",
        "    return date_info\n",
        "\n",
        "\n",
        "def extract_S3TOA_time_series(S3_LCC_flag,\n",
        "                              S3_LAI_flag,\n",
        "                              S3_FAPAR_flag,\n",
        "                              S3_FVC_flag,\n",
        "                              feature,start_date = [],end_date = [],stats='mean',pix_res=500\n",
        "                              ):\n",
        "\n",
        "    global product_name\n",
        "    global exp_var_unit\n",
        "    global exp_variable\n",
        "    global plotylim_min\n",
        "    global plotylim_max\n",
        "\n",
        "    if S3_LCC_flag:\n",
        "\n",
        "        product_name = 'projects/ee-dkvcsdvd/assets/EVT_regional/LCC_10_sites'\n",
        "        band_name = ['LCC_GREEN']\n",
        "        bands_name_out = ['LAI']\n",
        "        exp_variable = \"LCC\"\n",
        "        exp_var_unit = \"$\\mu$g/cm$^2$\"\n",
        "        plotylim_min = -7\n",
        "        plotylim_max = 100\n",
        "\n",
        "    if S3_LAI_flag:\n",
        "\n",
        "        product_name = 'projects/ee-dkvcsdvd/assets/Paper3_GBOV/S3_LAI'\n",
        "        band_name = ['LAI_GREEN']\n",
        "        bands_name_out = ['LAI']\n",
        "        exp_variable = \"LAI\"\n",
        "        exp_var_unit = \"m$^2$/m$^2$\"\n",
        "        plotylim_min = -0.5\n",
        "        plotylim_max = 9\n",
        "\n",
        "    if S3_FAPAR_flag:\n",
        "\n",
        "        product_name = 'projects/ee-dkvcsdvd/assets/Paper3_GBOV/S3_FAPAR'\n",
        "        band_name = ['FAPAR_GREEN']\n",
        "        bands_name_out = ['LAI']\n",
        "        exp_variable = \"FAPAR\"\n",
        "        exp_var_unit = \"[-]\"\n",
        "        plotylim_min = 0\n",
        "        plotylim_max = 1\n",
        "\n",
        "    if S3_FVC_flag:\n",
        "\n",
        "        product_name = 'projects/ee-dkvcsdvd/assets/Paper3_GBOV/S3_FVC'\n",
        "        band_name = ['FVC_GREEN']\n",
        "        bands_name_out = ['LAI']\n",
        "        exp_variable = \"FVC\"\n",
        "        exp_var_unit = \"[-]\"\n",
        "        plotylim_min = 0\n",
        "        plotylim_max = 1\n",
        "\n",
        "    geometry = ee.Geometry.Polygon(feature['geometry']['coordinates'])\n",
        "    coll = ee.ImageCollection(product_name)\\\n",
        "        .filterBounds(geometry)\\\n",
        "        .filterDate(start_date_S3, end_date_S3)\\\n",
        "        .select(band_name,bands_name_out)\n",
        "\n",
        "    images_list = [item.get('id') for item in coll.getInfo().get('features')]\n",
        "\n",
        "    info = coll.getRegion(geometry,pix_res).getInfo()\n",
        "\n",
        "    df=pd.DataFrame(info[1:],columns=info[0]).groupby('id').mean().reset_index()\n",
        "\n",
        "    df['date']=df['id'].apply(lambda x: S3TOA_get_date(x))\n",
        "\n",
        "    return df,images_list\n",
        "\n",
        "def extract_MODISLAI_time_series(feature,start_date = [],end_date = [],stats='mean',pix_res=500):\n",
        "\n",
        "    product_name = 'MODIS/061/MCD15A3H'\n",
        "    band_name = ['Lai']\n",
        "    bands_name_out = ['LAI']\n",
        "\n",
        "    geometry = ee.Geometry.Polygon(feature['geometry']['coordinates'])\n",
        "\n",
        "    coll = ee.ImageCollection(product_name)\\\n",
        "        .filterBounds(geometry)\\\n",
        "        .filterDate(start_date, end_date)\\\n",
        "        .select(band_name,bands_name_out)\n",
        "\n",
        "    images_list = [item.get('id') for item in coll.getInfo().get('features')]\n",
        "\n",
        "    info = coll.getRegion(geometry,pix_res).getInfo()\n",
        "\n",
        "    df=pd.DataFrame(info[1:],columns=info[0]).groupby('id').mean().reset_index() # Used to be .mean()\n",
        "\n",
        "    df['date']=df['id'].apply(lambda x: MODIS_get_date(x))\n",
        "\n",
        "    return df,images_list\n",
        "\n",
        "def extract_MODISFAPAR_time_series(feature,start_date = [],end_date = [],stats='mean',pix_res=500):\n",
        "\n",
        "    product_name = 'MODIS/061/MCD15A3H'\n",
        "    band_name = ['Fpar']\n",
        "    bands_name_out = ['FAPAR']\n",
        "\n",
        "    geometry = ee.Geometry.Polygon(feature['geometry']['coordinates'])\n",
        "\n",
        "    coll = ee.ImageCollection(product_name)\\\n",
        "        .filterBounds(geometry)\\\n",
        "        .filterDate(start_date, end_date)\\\n",
        "        .select(band_name,bands_name_out)\n",
        "\n",
        "    images_list = [item.get('id') for item in coll.getInfo().get('features')]\n",
        "\n",
        "    info = coll.getRegion(geometry,pix_res).getInfo()\n",
        "\n",
        "    df=pd.DataFrame(info[1:],columns=info[0]).groupby('id').mean().reset_index()\n",
        "\n",
        "    df['date']=df['id'].apply(lambda x: MODIS_get_date(x))\n",
        "\n",
        "    return df,images_list\n",
        "\n",
        "\n",
        "def extract_MODISNDVI_time_series(feature,start_date = [],end_date = [],stats='mean',pix_res=500):\n",
        "\n",
        "    product_name = composite_collection\n",
        "    band_name = ['NDVI']\n",
        "    bands_name_out = ['NDVI']\n",
        "\n",
        "    geometry = ee.Geometry.Polygon(feature['geometry']['coordinates'])\n",
        "\n",
        "    coll = ee.ImageCollection(product_name)\\\n",
        "        .filterBounds(geometry)\\\n",
        "        .filterDate(start_date, end_date)\\\n",
        "        .select(band_name,bands_name_out)\n",
        "\n",
        "    images_list = [item.get('id') for item in coll.getInfo().get('features')]\n",
        "\n",
        "    info = coll.getRegion(geometry,pix_res).getInfo()\n",
        "\n",
        "    df=pd.DataFrame(info[1:],columns=info[0]).groupby('id').mean().reset_index() # Used to be mean but it's daily data an error when accumulating elements\n",
        "\n",
        "    df['date']=df['id'].apply(lambda x: MODISNDVI_get_date(x))\n",
        "\n",
        "    return df,images_list\n",
        "\n",
        "def need_to_name(df_in):\n",
        "    df_in['LAI'] = df_in.LAI\n",
        "    return df_in\n",
        "\n",
        "def need_to_name_CGLS_LAI(df_in):\n",
        "    df_in['b1'] = df_in.b1 /31.875\n",
        "    return df_in\n",
        "\n",
        "def need_to_name_CGLS(df_in):\n",
        "    df_in['b1'] = df_in.b1 /255\n",
        "    return df_in\n",
        "\n",
        "def need_to_name_merisdivLCC(df_in):\n",
        "    df_in['b1'] = (df_in.b1) / 100\n",
        "    return df_in\n",
        "\n",
        "def need_to_name_gbov(df_in):\n",
        "    df_in['b1'] = df_in.b1\n",
        "    return df_in\n",
        "\n",
        "def need_to_name_modisdivLCC(df_in):\n",
        "    df_in['b1'] = (df_in.b1) / 2\n",
        "    return df_in\n",
        "\n",
        "def need_to_name_modisdivLAI(df_in):\n",
        "    df_in['LAI'] = (df_in.LAI) / 10\n",
        "    return df_in\n",
        "\n",
        "def need_to_name_modisdivFAPAR(df_in):\n",
        "    df_in['FAPAR'] = (df_in.FAPAR) / 100\n",
        "    return df_in\n",
        "\n",
        "def need_to_name_modisdivNDVI(df_in):\n",
        "    df_in['NDVI'] = (df_in.NDVI)\n",
        "    return df_in\n",
        "\n",
        "\n",
        "def datestr_to_number(time_vec):\n",
        "\n",
        "    \"\"\"\n",
        "    Function coverting date vector from string to absolute number vector\n",
        "    \"\"\"\n",
        "\n",
        "    time_vec_num = np.asarray([ _.toordinal() for _ in time_vec], dtype=np.float32)\n",
        "    return time_vec_num\n",
        "\n",
        "def number_to_datestr(time_vec_num):\n",
        "\n",
        "    \"\"\"\n",
        "    Function coverting date vector from string to absolute number vector\n",
        "    \"\"\"\n",
        "\n",
        "    time_vec = [datetime.fromordinal(int(_)) for _ in time_vec_num]\n",
        "    return time_vec\n",
        "\n",
        "def GPY_retrieval_Noutput(DATA,TIME,Master_Ind,output_timevec,Nt,proc_line_print ='MOGPR modelling..',W_rank=1, trained_model=[]):\n",
        "    \"\"\"\n",
        "    Function performing the multioutput gaussian-process regression at pixel level for gapfilling and temporal reconstruction purposes\n",
        "\n",
        "    Args:\n",
        "        DATA [array] : 3D (2DSpace, Time) array containing data to be processed\n",
        "        TIME [array] : vector containing the dates of each layer in the time dimension\n",
        "        Master_Ind [int] : Index identifying the Master output\n",
        "        output_timevec [array] :vector containing the dates on which output must be estimated\n",
        "        Nt [int]  : # of time the GP training must be performed (def=1)\n",
        "\n",
        "    \"\"\"\n",
        "\n",
        "    noutput_timeseries = len(DATA)\n",
        "\n",
        "    x_size = DATA[0].shape[1]\n",
        "    y_size = DATA[0].shape[2]\n",
        "    imout_sz = (output_timevec.shape[0],x_size,y_size)\n",
        "\n",
        "    Xtest     = output_timevec.reshape(output_timevec.shape[0],1)\n",
        "    Out_QFlag = np.ones((x_size,y_size), dtype=bool)\n",
        "    Out_mean  = []\n",
        "    Out_unc   = []\n",
        "    Out_model = create_empty_2D_list(x_size,y_size)\n",
        "\n",
        "    for _ in range(noutput_timeseries):\n",
        "        Out_mean.append(np.full(imout_sz,np.nan))\n",
        "        Out_unc.append(np.full(imout_sz,np.nan))\n",
        "\n",
        "    model_parameter_names = None\n",
        "    cnt = 0\n",
        "    tot = x_size*y_size\n",
        "    check_param_names_flag= True\n",
        "\n",
        "    for x, y in itertools.product(range(x_size), range(y_size)):\n",
        "\n",
        "            X_vec = []\n",
        "            Y_vec = []\n",
        "            Y_mean_vec = []\n",
        "            Y_std_vec  = []\n",
        "\n",
        "            for ind in range(noutput_timeseries):\n",
        "\n",
        "              #X_tmp  = np.array(TIME[ind],dtype=np.float128)\n",
        "              #Y_tmp  =np.array( DATA[ind][:,x,y],dtype=np.float128)\n",
        "              X_tmp  = TIME[ind]\n",
        "              Y_tmp  = DATA[ind][:,x,y]\n",
        "              X_tmp  = X_tmp[~np.isnan(Y_tmp),np.newaxis]\n",
        "              Y_tmp  = Y_tmp[~np.isnan(Y_tmp),np.newaxis]\n",
        "              X_vec.append(X_tmp)\n",
        "              Y_vec.append(Y_tmp)\n",
        "              del X_tmp,Y_tmp\n",
        "\n",
        "\n",
        "            if np.size(Y_vec[Master_Ind]) >0:\n",
        "\n",
        "                # Data Normalization\n",
        "                for ind in range(noutput_timeseries):\n",
        "                    Y_mean_vec.append(np.mean(Y_vec[ind]))\n",
        "                    Y_std_vec.append(np.std(Y_vec[ind]))\n",
        "                    Y_vec[ind] = (Y_vec[ind]-Y_mean_vec[ind])/Y_std_vec[ind]\n",
        "\n",
        "                # Multi-output training and testing sets\n",
        "                Xtrain = X_vec\n",
        "                Ytrain = Y_vec\n",
        "\n",
        "                nsamples, npixels = Xtest.shape\n",
        "                noutputs = len(Ytrain)\n",
        "\n",
        "                for i_test in range(Nt):\n",
        "\n",
        "                    Yp = np.zeros((nsamples, noutputs))\n",
        "                    Vp = np.zeros((nsamples, noutputs))\n",
        "\n",
        "                    K            =  GPy.kern.Matern32(Xtrain[0].shape[1])  # Use RBF or Matern32 as kernels\n",
        "                    LCM          =  GPy.util.multioutput.LCM(input_dim    =  Xtrain[0].shape[1],\n",
        "                                                             num_outputs  =  noutputs,\n",
        "                                                             kernels_list =  [K] * noutputs, W_rank=W_rank)\n",
        "\n",
        "                    model = GPy.models.GPCoregionalizedRegression(Xtrain, Ytrain, kernel=LCM.copy())  # , W_rank=noutputs)\n",
        "                    model['.*Mat32.var'].constrain_fixed(1.)\n",
        "\n",
        "                    if not np.isnan(Ytrain[1]).all():\n",
        "\n",
        "                            try:\n",
        "                                #if trained_model is None:\n",
        "                                model.optimize()\n",
        "                                #else:\n",
        "                                    #here we should iterate through the model's parameters to assigned the pretrained values\n",
        "                                   # model = 1\n",
        "\n",
        "                                list_tmp = [model.param_array]\n",
        "\n",
        "                                for _ in range(noutput_timeseries):\n",
        "                                    #print('model.sum.ICM'+str(_)+'.B.B')\n",
        "                                    list_tmp.append(eval('model.sum.ICM'+str(_)+'.B.B'))\n",
        "                                Out_model[x][y]=list_tmp\n",
        "                                # list_tmp contains [model.param_array, model.sum.ICM0.B.B,model.sum.ICM1.B.B])\n",
        "\n",
        "                                if check_param_names_flag:\n",
        "                                    model_parameter_names = model.parameter_names()\n",
        "                                    check_param_names_flag=False\n",
        "                            except:\n",
        "                                Out_QFlag[x,y]=False\n",
        "                                continue\n",
        "\n",
        "\n",
        "                            for out in range(noutputs):\n",
        "                                newX = Xtest.copy()\n",
        "\n",
        "                                newX = np.hstack([newX, out * np.ones((newX.shape[0], 1))])\n",
        "                                noise_dict = {'output_index': newX[:, -1:].astype(int)}\n",
        "                                Yp[:,None, out],Vp[:,None,out] =model.predict(newX, Y_metadata=noise_dict)\n",
        "\n",
        "                            if i_test==0:\n",
        "\n",
        "                                for ind in range(noutput_timeseries):\n",
        "                                    Out_mean[ind][:,None,x,y] = (Yp[:,None, 0]*Y_std_vec[ind]+Y_mean_vec[ind])/Nt\n",
        "                                    Out_unc[ind][:,None,x,y]  = (Vp[:,None, 0]*Y_std_vec[ind])/Nt\n",
        "\n",
        "                            else:\n",
        "                                for ind in range(noutput_timeseries):\n",
        "                                    Out_mean[ind][:,None,x,y] = Out_mean[ind][:,None,x,y] + (Yp[:,None, 0]*Y_std_vec[ind]+Y_mean_vec[ind])/Nt\n",
        "                                    Out_unc[ind][:,None,x,y]  = Out_unc[ind][:,None,x,y]  + (Vp[:,None, 0]*Y_std_vec[ind])/Nt\n",
        "\n",
        "                            del Yp,Vp\n",
        "    if check_param_names_flag:\n",
        "        print('\\n')\n",
        "        print(\"******************************************************************************************\")\n",
        "        print(\"No model has been trained within the processed block (probably due to non-valid input data)\".upper())\n",
        "        print(\"Processing is skippped to next block!\".upper())\n",
        "        print(\"******************************************************************************************\")\n",
        "        print('\\n')\n",
        "\n",
        "    return  Out_mean, Out_unc, Out_QFlag, Out_model,model_parameter_names"
      ],
      "metadata": {
        "id": "VYGrwf7Ya1pZ"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Here we are going to run the MOGPR function.\n"
      ],
      "metadata": {
        "id": "asXt6S4idwt2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "def main_loop(S3_LCC_flag = False, S3_FVC_flag = False, S3_LAI_flag= False,S3_FAPAR_flag= False,    # variable to MOGPR reconstruct\n",
        "              MODISLAI_flag = False, MODISFAPAR_flag= False, MODISNDVI_flag= False):                # Ancillary variable\n",
        "\n",
        "    feature = site\n",
        "\n",
        "    TIME = []   # Time list containing the dates for the reconstructing (S3) and predictor (MODIS) variables\n",
        "    DATA  = []  #  Variable values for reconstructing (S3) and predictor (MODIS) variables\n",
        "    TIME_str = []\n",
        "    legend_vec = []\n",
        "\n",
        "    print('S3TOAGPR time series being retrieved')\n",
        "    dfS3TOA,_ = extract_S3TOA_time_series(S3_LCC_flag,S3_LAI_flag,S3_FAPAR_flag,S3_FVC_flag,feature,start_date,end_date)\n",
        "    dfS3TOA = need_to_name(dfS3TOA)\n",
        "    TIME.append(datestr_to_number(dfS3TOA['date']))\n",
        "    TIME_str.append(dfS3TOA['date'])\n",
        "    DATA.append(np.reshape(dfS3TOA['LAI'].values,(dfS3TOA.shape[0],1,1)))\n",
        "    legend_vec.append('S3TOA')\n",
        "\n",
        "    if MODISLAI_flag:\n",
        "        print('MODISLAI time series being retrieved')\n",
        "        dfMODISLAI,_ = extract_MODISLAI_time_series(feature,start_date,end_date)\n",
        "        dfMODISLAI = need_to_name_modisdivLAI(dfMODISLAI)\n",
        "        TIME.append(datestr_to_number(dfMODISLAI['date']))\n",
        "        TIME_str.append(dfMODISLAI['date'])\n",
        "        DATA.append(np.reshape(dfMODISLAI['LAI'].values,(dfMODISLAI.shape[0],1,1)))\n",
        "        legend_vec.append('MODIS')\n",
        "        anc_variable = \"LAI\"\n",
        "\n",
        "    if MODISFAPAR_flag:\n",
        "        print('MODISFAPAR time series being retrieved')\n",
        "        dfMODISFAPAR,_ = extract_MODISFAPAR_time_series(feature,start_date,end_date)\n",
        "        dfMODISFAPAR = need_to_name_modisdivFAPAR(dfMODISFAPAR)\n",
        "        TIME.append(datestr_to_number(dfMODISFAPAR['date']))\n",
        "        TIME_str.append(dfMODISFAPAR['date'])\n",
        "        DATA.append(np.reshape(dfMODISFAPAR['FAPAR'].values,(dfMODISFAPAR.shape[0],1,1)))\n",
        "        legend_vec.append('MODIS')\n",
        "        anc_variable = \"FAPAR\"\n",
        "\n",
        "\n",
        "    if MODISNDVI_flag:\n",
        "        print('MODISNDVI time series being retrieved')\n",
        "        dfMODISNDVI,_ = extract_MODISNDVI_time_series(feature,start_date,end_date)\n",
        "        dfMODISNDVI = need_to_name_modisdivNDVI(dfMODISNDVI)\n",
        "        TIME.append(datestr_to_number(dfMODISNDVI['date']))\n",
        "        TIME_str.append(dfMODISNDVI['date'])\n",
        "        DATA.append(np.reshape(dfMODISNDVI['NDVI'].values,(dfMODISNDVI.shape[0],1,1)))\n",
        "        legend_vec.append('MODIS')\n",
        "        anc_variable = \"NDVI\"\n",
        "\n",
        "    Nout = len(DATA)\n",
        "    Nt =1\n",
        "\n",
        "    time_vec_MIN        = np.min(list(pd.core.common.flatten(TIME)))\n",
        "    time_vec_MAX        = np.max(list(pd.core.common.flatten(TIME)))\n",
        "    output_timevec      = np.array(range(int(time_vec_MIN),int(time_vec_MAX),Tstep),dtype=float)\n",
        "    output_time         = number_to_datestr(output_timevec)\n",
        "    outputs_timevec_str =[ _.strftime(\"%Y%m%d\") for _ in output_time]\n",
        "\n",
        "    print('MULTIOUTPUT Being calculated, please wait')\n",
        "    Master_Ind = 0\n",
        "    Out_mean, Out_unc, Out_QFlag, Out_model,model_parameter_names = GPY_retrieval_Noutput(DATA[:],TIME[:],Master_Ind,output_timevec,\n",
        "                                                                                                Nt,proc_line_print ='MOGPR modelling..')\n",
        "\n",
        "\n",
        "    plt.figure(figsize= (25,6))\n",
        "    sensor = legend_vec[0]\n",
        "    p1 = plt.plot_date(output_time, Out_mean[0].ravel(),\"-\",label = \"S3_MOGPR\")\n",
        "    p2 = plt.plot_date(TIME_str[0],DATA[0].ravel(),\"o\",label = \"S3_in\")\n",
        "\n",
        "    plt.fill_between(output_time, Out_mean[0].ravel()+Out_unc[0].ravel(),\n",
        "                        Out_mean[0].ravel()-Out_unc[0].ravel(), alpha=0.5)\n",
        "    fontsize = 40\n",
        "\n",
        "    plt.yticks(fontsize=fontsize)\n",
        "    # plt.title(site_info[1]+\" \" + site_info[0]+\"  (\" +site_info[3]+\", \" + site_info[4]+\")  ancillary : \" +anc_variable ,fontsize=fontsize)\n",
        "    plt.ylabel(\"\",fontsize=fontsize)\n",
        "    plt.ylim([plotylim_min,plotylim_max])\n",
        "    plt.ylabel(exp_variable + \" \"+ exp_var_unit,fontsize=fontsize)\n",
        "    plt.grid(True)\n",
        "    plt.tight_layout()\n",
        "    plt.legend()\n",
        "    plt.show()\n",
        "\n",
        "\n",
        "\n",
        "    # return Out_mean, Out_unc, Out_QFlag, Out_model,model_parameter_names, TIME, DATA, TIME_str, output_time, legend_vec\n",
        "\n",
        "    \"\"\"\n",
        "    Out_mean = mean estimate output from the MOGPR algorithm\n",
        "    Out_unc = epistemic uncertainty associated with the MOGPR algorithm\n",
        "    \"\"\"\n"
      ],
      "metadata": {
        "id": "Rf74EjJxdRS2"
      },
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "We call the function, use the flag associated with the variable-sensor you want to use:\n",
        "\n",
        "For reconstruction: use S3 flags\n",
        "For predictor/guiding variable: use MODIS flags\n",
        "\n",
        "\n",
        "Here we are reconstructing S3 Based FVC with ancillary MODIS based FAPAR and NDVI time series."
      ],
      "metadata": {
        "id": "tJRo_GmYguVO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "main_loop(S3_FVC_flag = True  # Reconstructing\n",
        "          ,MODISFAPAR_flag = True # Predictor 1\n",
        "          ,MODISNDVI_flag = False # Predictor 2\n",
        "          )"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Nb6KFRU_guAh",
        "outputId": "3dab6788-c1d9-4299-f8dc-2127f0e34ea1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "S3TOAGPR time series being retrieved\n",
            "MODISFAPAR time series being retrieved\n",
            "MULTIOUTPUT Being calculated, please wait\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Plotting of the reconstructed time series"
      ],
      "metadata": {
        "id": "nsdNhUO9fHQt"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 181
        },
        "id": "Hh0TmdhMfHD3",
        "outputId": "9e728cdc-34a6-42f0-a1e9-32c295cce2b6"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-19-805b189f896e>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mOut_mean\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'Out_mean' is not defined"
          ]
        }
      ]
    }
  ]
}